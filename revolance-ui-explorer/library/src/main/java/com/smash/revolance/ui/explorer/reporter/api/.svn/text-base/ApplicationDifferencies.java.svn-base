package ets.bour.revolance.reporter.api;

import ets.bour.revolance.diff.DiffType;
import ets.bour.revolance.element.IPageElement;
import ets.bour.revolance.page.IPage;
import org.json.JSONArray;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Created with IntelliJ IDEA.
 * User: ebour
 * Date: 23/02/13
 * Time: 08:30
 */
public class ApplicationDifferencies
{
    private final HashMap<IPage, Map<IPage, Map<DiffType, List<IPageElement>>>> differencies;

    public ApplicationDifferencies()
    {
        this.differencies = new HashMap<IPage, Map<IPage, Map<DiffType, List<IPageElement>>>>();
    }

    public void addDifferencies(IPage ref, IPage compared, Map<DiffType, List<IPageElement>> differencies)
    {
        Map<DiffType, List<IPageElement>> diff = getComparedPage(compared, getRefPage( ref ) );
        diff.putAll(  differencies );
    }

    private Map<IPage, Map<DiffType, List<IPageElement>>> getRefPage(IPage ref)
    {
        if(!differencies.containsKey( ref ))
        {
            differencies.put( ref, new HashMap<IPage, Map<DiffType, List<IPageElement>>>(  ) );
        }
        return differencies.get( ref );
    }

    private Map<DiffType, List<IPageElement>> getComparedPage(IPage compared, Map<IPage, Map<DiffType, List<IPageElement>>> refPage)
    {
        if(!refPage.containsKey( compared ))
        {
            refPage.put( compared, new HashMap<DiffType, List<IPageElement>>(  ) );
        }
        return refPage.get( compared );
    }

    private List<IPageElement> getDifferencies(DiffType diffType, Map<DiffType, List<IPageElement>> elements)
    {
        if(!elements.containsKey( diffType ))
        {
            elements.put( diffType, new ArrayList<IPageElement>(  ) );
        }
        return elements.get( diffType );
    }

    public String toJSon() throws Exception
    {
        JSONObject json = new JSONObject();

        JSONObject pages = new JSONObject();

        for(IPage page : differencies.keySet())
        {
            JSONObject pageJson = page.getJSon();

            JSONArray pagesCompared = new JSONArray(  );
            Map<IPage, Map<DiffType, List<IPageElement>>> pageComparisonMap = differencies.get( page );
            for(IPage comparedPage : pageComparisonMap.keySet())
            {
                JSONObject pageComparedJson = comparedPage.getJSon();

                Map<DiffType, List<IPageElement>> pageComparisonTypeMap = pageComparisonMap.get( comparedPage );
                for(DiffType diffType : pageComparisonTypeMap.keySet())
                {
                    JSONObject diff = new JSONObject(  );

                    diff.put( "diffType", diffType );

                    JSONArray diffElement = new JSONArray(  );
                    List<IPageElement> variations = pageComparisonTypeMap.get( diffType );
                    if(!variations.isEmpty())
                    {
                        for(IPageElement element : variations)
                        {
                            diffElement.put( element.getJSon() );
                        }
                    }
                    else
                    {
                        diffElement.put( JSONObject.NULL );
                    }
                    diff.put( "diff", diffElement );

                    pageComparedJson.accumulate( "differencies", diff );
                }
                pagesCompared.put( pageComparedJson );
            }

            pageJson.put( "compared", pagesCompared );
            pages.accumulate( "pages", pageJson );
        }

        json.put( "comparisons", pages );

        return json.toString(4);
    }
}
