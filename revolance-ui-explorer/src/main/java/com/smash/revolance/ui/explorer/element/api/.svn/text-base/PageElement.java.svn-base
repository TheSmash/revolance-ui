package ets.bour.revolance.element.api;

import ets.bour.revolance.diff.DiffType;
import ets.bour.revolance.element.IPageElement;
import ets.bour.revolance.helper.BotHelper;
import ets.bour.revolance.helper.ImageHelper;
import ets.bour.revolance.helper.UserHelper;
import ets.bour.revolance.page.IPage;
import ets.bour.revolance.user.SiteMap;
import ets.bour.revolance.user.User;
import ets.bour.revolance.user.bot.Bot;
import org.apache.commons.io.FileUtils;
import org.json.JSONException;
import org.json.JSONObject;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.Point;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;

import java.awt.*;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

/**
 * User: ebour
 * Date: 26/01/13
 * Time: 23:59
 */
public abstract class PageElement implements IPageElement
{
    private final String _id = UUID.randomUUID().toString();

    private IPage     page;
    private Dimension dim;
    private Point     pos;

    private String tag   = "";
    private String id    = "";
    private String clz   = "";
    private String txt   = "";
    private String type  = "";
    private String img   = "";
    private String href  = "";
    private String value = "";
    private String html = "";

    private File caption;

    private boolean  clicked;
    private boolean  broken;
    private DiffType diffType;

    public PageElement(IPage page, WebElement element)
    {
        setPage( page );
        setTxt( element.getText() );
        setTag( element.getTagName() );
        setDim( element.getSize() );
        setPos( element.getLocation() );
        setClz( element.getAttribute( "class" ) );
        setId( element.getAttribute( "id" ) );
        setValue( element.getAttribute( "value" ) );
    }

    @Override
    public void click() throws Exception
    {
        if ( isClickable() )
        {
            try
            {
                UserHelper.browseTo( getUser(), getUrl() );

                WebElement element = BotHelper.findMatchingElement( getBot(), this );
                if(element != null)
                {
                    if(element.isDisplayed() && element.isEnabled())
                    {
                        System.out.println("Clicking on " + toJSon());
                        element.click();
                        clicked = true;
                    }
                }
            }
            catch (Exception e)
            {
                logException( e );
            }
        }
    }

    private void logException(Exception e)
    {
        try
        {
            System.err.println("Element could not be found:\n" + this.toJSon());
        }
        catch (JSONException e1)
        {
            System.err.println( e );
        }
    }

    public abstract boolean equals(IPageElement element) throws Exception;

    @Override
    public boolean isAlike(IPageElement element) throws Exception
    {
        return getText().contentEquals( element.getText() )
                && ImageHelper.imgEquals( element.getCaptionFile(), getCaptionFile() );
    }

    @Override
    public boolean isIncluded(IPageElement element)
    {
        return element.getText().contains( getText() )
                && PageElement.isIncluded(this, element.getLocation());
    }

    @Override
    public Rectangle getLocation()
    {
        return new Rectangle( getPos().getX(), getPos().getY(), getDim().getWidth(), getDim().getHeight() );
    }

//-- Beginning of setters / getters

    public void setId(String id)
    {
        if(id != null)
            this.id = id;
    }

    public String getId()
    {
        return id;
    }

    public String getHref()
    {
        return href;
    }

    public void setHref(String href)
    {
        if(href != null)
            this.href = href;
    }

    public boolean hasBeenClicked()
    {
        return clicked;
    }

    public void setTag(String tag)
    {
        if(tag != null)
            this.tag = tag;
    }

    public String getClz()
    {
        return clz;
    }

    public void setClz(String clz)
    {
        if(clz != null)
            this.clz = clz;
    }

    public Dimension getDim()
    {
        return dim;
    }

    public void setDim(Dimension dim)
    {
        this.dim = dim;
    }

    public Point getPos()
    {
        return pos;
    }

    public void setPos(Point pos)
    {
        this.pos = pos;
    }

    public String getTag()
    {
        return tag;
    }

    public void setType(String type)
    {
        if(type != null)
            this.type = type;
    }

    public String getType()
    {
        return type;
    }

    public void setTxt(String txt)
    {
        if( txt != null )
            this.txt = txt;
    }

    public String getText()
    {
        return txt;
    }

    public void setImg(String img)
    {
        if(img != null)
            this.img = img;
    }

    public String getImg()
    {
        return img;
    }

    public IPage getPage()
    {
        return page;
    }

    public int getArea()
    {
        return getDim().getWidth() * getDim().getHeight();
    }

    public void setValue(String value)
    {
        if(value != null)
            this.value = value;
    }

    public String getValue()
    {
        return value;
    }

    public boolean isBroken()
    {
        return broken;
    }

    public void setBroken(boolean b)
    {
        this.broken = b;
    }

//-- Enf of basic setters / getters

    // Caption feature

    public File getCaptionFile()
    {
        if ( caption == null )
        {
            File elements = new File( getPage().getCaptionFolder(), "elements" );
            if(!elements.exists())
            {
                elements.mkdirs();
            }
            caption = new File( elements, _id + ".png" );
        }
        return caption;
    }

    public String getCaptionPath()
    {
        return getCaptionFile().getAbsolutePath();
    }

    @Override
    public void takeScreenShot() throws Exception
    {
        if ( getArea() > 0 )
        {
            if ( getPage().getUser().isPageElementScreenshotEnabled() )
            {

                int x = getPos().getX();
                int y = getPos().getY();

                int w = getDim().getWidth();
                int h = getDim().getHeight();

                ImageHelper.cropImage( getPage().getImage(), x, y, w, h, getCaptionFile() );
            }
        }
        else
        {
            //Create an empty file for further comparisons
            getCaptionFile().createNewFile();
        }
    }

    public boolean isAlike(PageElement element) throws Exception
    {
        return getText().contentEquals( element.getText() )
                && ImageHelper.imgEquals( element.getCaptionFile(), getCaptionFile() );
    }


    @Override
    public int compareTo(IPageElement element)
    {
        if ( element.getPos().getY() >= this.getPos().getY() && element.getPos().getX() > this.getPos().getX() )
        {
            return -1;
        } else
        {
            return 1;
        }
    }

    public void setPage(IPage page)
    {
        this.page = page;
    }

    public boolean isClickable()
    {
        if( !BotHelper.rightDomain( getPage() ) )
        {
            return false;
        }
        else if ( this instanceof Image || this instanceof Data )
        {
            return false;
        }
        else if ( this instanceof Link )
        {
            return !getUser().getExcludedLinks().contains( getText() );
        }
        else if ( this instanceof Button )
        {
            return !getUser().getExcludedButtons().contains( getText() );
        }
        else
        {
            return false;
        }
    }

    public static boolean isVisible(WebElement element)
    {
        return element.isDisplayed();
    }

    public JSONObject getJSon() throws JSONException
    {
        JSONObject json= new JSONObject();

        json.put( "type", this.getClass().getSimpleName() );
        json.put( "tag", getTag() );
        json.put( "href", getHref() );
        json.put( "text", getText() );
        json.put( "value", getValue() );
        json.put( "pageUrl", getPage().getUrl() );
        if(getUser().isPageElementScreenshotEnabled())
        {
            json.put( "caption", getCaptionPath() );
        }

        return json;
    }


    public String toJSon() throws JSONException
    {
        return getJSon().toString(4);
    }

    // For convenience only

    public User getUser()
    {
        return getPage().getUser();
    }

    public Bot getBot() throws Exception
    {
        return getUser().getBot();
    }

    public WebDriver getBrowser() throws Exception
    {
        return getBot().getBrowser();
    }

    public String getUrl()
    {
        return getPage().getUrl();
    }

    public SiteMap getSitemap()
    {
        return getUser().getSiteMap();
    }

    public void setDiffType(DiffType type)
    {
        diffType = type;
    }

    public DiffType getDiffType()
    {
        return diffType;
    }

    public void delete() throws Exception
    {
        if(getUser().isPageElementScreenshotEnabled())
        {
            File caption = getCaptionFile();
            if(caption.exists())
            {
                FileUtils.forceDelete(caption);
            }
        }
    }

    public String toString()
    {
        return getText();
    }

    public static boolean isIncluded(IPageElement element, Rectangle rectangle)
    {
        return element.getLocation().contains( rectangle );
    }

    public static boolean isIncluded(WebElement element, Rectangle rectangle)
    {
        Point topleft = element.getLocation();
        Dimension dim = element.getSize();
        Rectangle rectangleRef = new Rectangle( topleft.getX(), topleft.getY(), dim.getWidth(), dim.getHeight());

        return rectangleRef.contains( rectangle );
    }

    public static List<IPageElement> filterClickableElements(List<IPageElement> elements)
    {
        List<IPageElement> filteredElements = new ArrayList<IPageElement>(  );

        for(IPageElement element : elements)
        {
            if( element.isClickable()  )
            {
                filteredElements.add( element );
            }
        }

        return filteredElements;
    }

    public static WebElement filterElementByText(List<WebElement> elements, String text) throws Exception
    {
        for(WebElement element : elements)
        {
            if(element.getText().contentEquals( text ) )
            {
                return element;
            }
        }
        throw new Exception( "Unable to find element with text='" + text + "'." );
    }

    public static WebElement filterElementByLocation(List<WebElement> elements, Rectangle rectangle) throws Exception
    {
        for(WebElement element : elements)
        {
            if( PageElement.isIncluded( element, rectangle ) )
            {
                return element;
            }
        }
        throw new Exception( "Unable to find element at location " + rectangle.toString() + "." );
    }
}
